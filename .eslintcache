[{"C:\\Users\\BSPsiuk\\dev\\iu-media-manager\\src\\index.js":"1","C:\\Users\\BSPsiuk\\dev\\iu-media-manager\\src\\react\\App.js":"2"},{"size":473,"mtime":1611282823805,"results":"3","hashOfConfig":"4"},{"size":13235,"mtime":1611283738385,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1vxauu2",{"filePath":"9","messages":"10","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\BSPsiuk\\dev\\iu-media-manager\\src\\index.js",[],["12","13"],"C:\\Users\\BSPsiuk\\dev\\iu-media-manager\\src\\react\\App.js",["14","15","16","17","18","19","20","21","22","23"],"import React from 'react';\r\n// import \"./Custom.css\";\r\n// import logo from './logo.svg';\r\n// MEDIUM GUIDE: https://medium.com/@johndyer24/building-a-production-electron-create-react-app-application-with-shared-code-using-electron-builder-c1f70f0e2649\r\n// Also check out his github if this project gets screwed up\r\nimport {\r\n    Grid,\r\n    // Paper,\r\n    TextField,\r\n    Button,\r\n    ButtonGroup,\r\n    IconButton,\r\n    // Select,\r\n    // MenuItem,\r\n    AppBar,\r\n    Tabs,\r\n    Tab,\r\n    Typography,\r\n    Toolbar,\r\n    Card,\r\n    CardContent,\r\n    // CardActions,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    CircularProgress,\r\n} from '@material-ui/core';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport \"typeface-roboto\"\r\n// import ReactPlayer from \"react-player\";\r\nimport \"video-react/dist/video-react.css\";\r\nimport { Player, BigPlayButton } from \"video-react\";\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\n// import { clipboard } from 'electron';\r\n\r\nconst {\r\n    ipcRenderer,\r\n    clipboard,\r\n    Notification\r\n} = window;\r\n\r\n// const IFTTT_KEY = \"dwl7jute0JZoYsaUx3fRsqpZ_0d9PR3pF8bjTTt37aB\"; // TEST KEY\r\nconst IFTTT_KEY = \"RLR-Vg87HK_055uHEhUpU\"; // PROD KEY\r\n\r\nconst innerViewTheme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#1d537a\"\r\n        },\r\n        secondary: {\r\n            main: \"#d6931f\",\r\n            \r\n        }\r\n    }\r\n});\r\n\r\nconst cardMargin = 8;\r\nconst cardStyle = {\r\n    marginTop: `${cardMargin}px`,\r\n    marginLeft: `${cardMargin}px`,\r\n    marginRight: `${cardMargin}px`\r\n}; const cardStyleLast = {\r\n    margin: `${cardMargin}px`\r\n};\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // Video\r\n            videoTitle: \"BABY \",\r\n            videoDescription: \"Video provided by InnerView Ultrasound\\nMalvern, PA\\nPh: (610) 408-9100\\nText: (302) 648-2229\\nwww.innerviewultrasound.com\",\r\n            videoIsPublic: false,\r\n            videoIsReadyToUpload: false,\r\n            // Removable Storage\r\n            removableStorageIsMounted: false,\r\n            removableStorageType: \"\",\r\n            // Processing\r\n            processingStatus: null,\r\n            // Video Preview\r\n            videoPreviewSrc: null,\r\n            // Debugging\r\n            debugModeEnabled: false,\r\n            // YouTube Video\r\n            youtubeVideoUrl: null\r\n        };\r\n    }\r\n\r\n    componentDidMount = ()=> {\r\n        ipcRenderer.on(\"notification-event\", (event, data)=>{\r\n            new Notification(data.title, {body: data.body}).onclick=()=>{}\r\n        });\r\n        ipcRenderer.on(\"alert-event\", (event, data)=>{\r\n            alert(data);\r\n        });\r\n        ipcRenderer.on(\"iosNotificationCopying-event\", (event, data)=>{\r\n            fetch(`https://maker.ifttt.com/trigger/iuvu-copying-complete/with/key/${IFTTT_KEY}`);\r\n        });\r\n        ipcRenderer.on(\"iosNotificationProcessing-event\", (event, data)=>{\r\n            fetch(`https://maker.ifttt.com/trigger/iuvu-processing-complete/with/key/${IFTTT_KEY}`);\r\n        });\r\n        ipcRenderer.on(\"processing-event\", (event, data)=>{\r\n            this.setState({processingStatus: data});\r\n        });\r\n        ipcRenderer.on(\"removableStorage-event\", (event, data)=>{\r\n            this.setState({removableStorageIsMounted: (data.event === \"inserted\"), removableStorageType: data.storageType});\r\n        });\r\n        ipcRenderer.on(\"uploadButton-event\", (event, data)=>{\r\n            this.setState({videoIsReadyToUpload: data});\r\n        });\r\n        ipcRenderer.on(\"video-event\", (event, data)=>{\r\n            this.setState({videoPreviewSrc: data});\r\n        });\r\n        ipcRenderer.on(\"upload-event\", (event, data)=>{\r\n            this.setState({youtubeVideoUrl: data});\r\n        });\r\n    }\r\n\r\n    toggleDebugMode = ()=>{\r\n        if (!this.state.debugModeEnabled) {\r\n            ipcRenderer.send(\"debug-enable\");\r\n        } else {\r\n            ipcRenderer.send(\"debug-disable\");\r\n        }\r\n        this.setState({debugModeEnabled: !this.state.debugModeEnabled});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <ThemeProvider theme={innerViewTheme}>\r\n                <AppBar className=\"drag\" position={\"sticky\"} color={\"primary\"}>\r\n                    <Toolbar variant=\"dense\">\r\n                        <IconButton className=\"no-drag\" edge=\"start\" color=\"inherit\" onContextMenu={this.toggleDebugMode} onClick={()=>{\r\n                            ipcRenderer.send(\"button-hide\");\r\n                        }}>\r\n                            <CloseIcon/>\r\n                        </IconButton>\r\n                        <Typography className={\"no-select\"} variant=\"h6\" style={{fontFamily: \"roboto\"}}>InnerView Ultrasound - Video Uploader</Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Grid container>\r\n                    <Grid item xs={7}>\r\n                        <Card style={cardStyle}>\r\n                            <CardContent>\r\n                                <Typography variant=\"h5\" color=\"textPrimary\" gutterBottom>Processing Information</Typography>\r\n                                <Typography variant=\"subtitle2\" color=\"textSecondary\"><strong>Removable storage inserted:</strong> {this.state.removableStorageIsMounted ? \"Yes\" : \"No\"}</Typography>\r\n                                <Typography variant=\"subtitle2\" color=\"textSecondary\"><strong>Storage type:</strong> {Boolean(this.state.removableStorageType) ? this.state.removableStorageType : \"(Not inserted)\"}</Typography>\r\n                                <Typography variant=\"subtitle2\" color=\"textSecondary\"><strong>Processing status:</strong> {this.state.processingStatus ? this.state.processingStatus : \"Idle\"}</Typography>\r\n\r\n                                <br hidden={!this.state.debugModeEnabled}/>\r\n                                <Typography hidden={!this.state.debugModeEnabled} variant=\"h5\" color=\"textPrimary\" gutterBottom>Debug Information</Typography>\r\n                                <Typography hidden={!this.state.debugModeEnabled} variant=\"subtitle2\" color=\"textSecondary\"><strong>Window location:</strong> {window.location.href}</Typography>\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Card style={cardStyleLast}>\r\n                            <CardContent>\r\n                                <Typography variant=\"h5\" color=\"textPrimary\" gutterBottom>Video Settings</Typography>\r\n                                <TextField error={!this.state.videoTitle.length} helperText={!this.state.videoTitle.length ? \"You must enter a title for the video.\":\"\"} value={this.state.videoTitle} margin={\"dense\"} onChange={e=>{\r\n                                        this.setState({videoTitle: e.target.value.toUpperCase()});\r\n                                        // console.log(e.target.value);\r\n                                    }} fullWidth label=\"Title\" variant=\"outlined\" />\r\n                                <TextField value={this.state.videoDescription} margin={\"dense\"} onChange={e=>{\r\n                                        this.setState({videoDescription: e.target.value});\r\n                                        // console.log(e.target.value);\r\n                                    }} multiline fullWidth label=\"Description\" variant=\"outlined\" />\r\n                                <FormControlLabel control={<Checkbox checked={this.state.videoIsPublic} color=\"primary\" onChange={e=>{\r\n                                        this.setState({videoIsPublic: e.target.checked});\r\n                                        // console.log(e.target.checked);\r\n                                    }} />} label={<Typography color=\"textSecondary\">Post video publically on YouTube</Typography>} />\r\n                                {/* <ButtonGroup color=\"primary\" size=\"large\" variant=\"outlined\" >\r\n                                    <Button onClick={()=>{\r\n                                        ipcRenderer.send(\"channel1\", \"TEST MESSAGE\");\r\n                                    }}>SEND TEST MESSAGE</Button>\r\n                                    <Button onClick={()=>{\r\n                                        ipcRenderer.send(\"button-eject\", \"drutil tray eject\");\r\n                                    }}>Eject Disk</Button>\r\n                                </ButtonGroup>\r\n                                <br/>\r\n                                <Button color=\"primary\" variant=\"outlined\">Test Button<h4>text</h4><CircularProgress/></Button> */}\r\n                                <br/>\r\n                                <Button variant=\"contained\" color=\"secondary\" disabled={!this.state.videoIsReadyToUpload} startIcon={<CloudUploadIcon />} onClick={()=>{\r\n                                    this.setState({videoIsReadyToUpload: false});\r\n                                    ipcRenderer.send(\"button-upload\", {\r\n                                        \"videoTitle\": this.state.videoTitle,\r\n                                        \"videoDescription\": this.state.videoDescription,\r\n                                        \"videoIsPublic\": this.state.videoIsPublic\r\n                                    });\r\n                                }}>Upload</Button>\r\n                            </CardContent>\r\n                        </Card>\r\n                        {/* <Button variant=\"outlined\" color=\"secondary\" onClick={()=>{\r\n                            ipcRenderer.send(\"button-test-copying\");\r\n                        }}>Test Copying</Button>\r\n                        <Button variant=\"outlined\" color=\"secondary\" onClick={()=>{\r\n                            ipcRenderer.send(\"button-test-processing\");\r\n                        }}>Test Processing</Button>\r\n                        <Button variant=\"outlined\" color=\"secondary\" onClick={()=>{\r\n                            ipcRenderer.send(\"button-loadVideoSrc\");\r\n                        }}>Load Video Source</Button>\r\n                        <Button variant=\"outlined\" color=\"secondary\" onClick={()=>{\r\n                            ipcRenderer.send(\"button-clearVideoSrc\");\r\n                        }}>Clear Video Source</Button> */}\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                        <Card style={{marginTop: `${cardMargin}px`, marginRight: `${cardMargin}px`}} hidden={this.state.videoPreviewSrc}>\r\n                            <CardContent>\r\n                                <Typography variant=\"h5\" color=\"textPrimary\" gutterBottom>Video Preview</Typography>\r\n                                <Typography variant=\"subtitle2\" color=\"textSecondary\">Your video will be displayed here when processing is finished.</Typography>\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Card style={{marginTop: `${cardMargin}px`, marginRight: `${cardMargin}px`}} hidden={!this.state.videoPreviewSrc} style={{marginTop: `${cardMargin}px`, marginRight: `${cardMargin}px`, marginBottom: `${cardMargin}px`}}>\r\n                            <CardContent>\r\n                                <Typography variant=\"h5\" color=\"textPrimary\" gutterBottom>Video Preview</Typography>\r\n                                {/* <ReactPlayer url={this.state.videoPreviewSrc} loop volume={1} playing controls width=\"100%\" height=\"100%\"/> */}\r\n                                <Player muted={!this.state.videoPreviewSrc} src={this.state.videoPreviewSrc} autoPlay loop>\r\n                                    <BigPlayButton position=\"center\"/>\r\n                                </Player>\r\n                            </CardContent>\r\n                        </Card>\r\n                        <Card style={{marginTop: `${cardMargin}px`, marginRight: `${cardMargin}px`, marginBottom: `${cardMargin}px`}}>\r\n                            <CardContent>\r\n                            <Typography variant=\"h5\" color=\"textPrimary\" gutterBottom>Video Information</Typography>\r\n                            <Typography variant=\"subtitle2\" color=\"textSecondary\"><strong>Video Title:</strong> {this.state.videoTitle}</Typography>\r\n                            <Typography variant=\"subtitle2\" color=\"textSecondary\"><strong>Description:</strong></Typography>\r\n                            {this.state.videoDescription.split(\"\\n\").map((item, i)=> {\r\n                                return <Typography key={i} variant=\"subtitle2\" color=\"textSecondary\">{item.trim() ? item : <br/>}</Typography>;\r\n                            })}\r\n                            <Typography variant=\"subtitle2\" color=\"textSecondary\"><strong>Visibility:</strong> {this.state.videoIsPublic ? \"Public\" : \"Unlisted\"}</Typography>\r\n                            <Typography variant=\"subtitle2\" color=\"textSecondary\"><strong>Video URL:</strong> {this.state.youtubeVideoUrl ? this.state.youtubeVideoUrl : \"(Not available)\"}</Typography>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                </Grid>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n}",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":11,"column":5,"nodeType":"30","messageId":"31","endLine":11,"endColumn":16},{"ruleId":"28","severity":1,"message":"32","line":16,"column":5,"nodeType":"30","messageId":"31","endLine":16,"endColumn":9},{"ruleId":"28","severity":1,"message":"33","line":17,"column":5,"nodeType":"30","messageId":"31","endLine":17,"endColumn":8},{"ruleId":"28","severity":1,"message":"34","line":25,"column":5,"nodeType":"30","messageId":"31","endLine":25,"endColumn":21},{"ruleId":"28","severity":1,"message":"35","line":36,"column":22,"nodeType":"30","messageId":"31","endLine":36,"endColumn":28},{"ruleId":"28","severity":1,"message":"36","line":37,"column":5,"nodeType":"30","messageId":"31","endLine":37,"endColumn":11},{"ruleId":"28","severity":1,"message":"37","line":38,"column":5,"nodeType":"30","messageId":"31","endLine":38,"endColumn":10},{"ruleId":"28","severity":1,"message":"38","line":39,"column":5,"nodeType":"30","messageId":"31","endLine":39,"endColumn":9},{"ruleId":"28","severity":1,"message":"39","line":46,"column":5,"nodeType":"30","messageId":"31","endLine":46,"endColumn":14},{"ruleId":"40","severity":1,"message":"41","line":219,"column":139,"nodeType":"42","endLine":219,"endColumn":242},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'ButtonGroup' is defined but never used.","Identifier","unusedVar","'Tabs' is defined but never used.","'Tab' is defined but never used.","'CircularProgress' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'clipboard' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]